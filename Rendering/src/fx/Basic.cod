//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerFrame
{
    Light   gLights[10];                // Offset:    0, size: 1120
    float   gNumLights;                 // Offset: 1120, size:    4
    float3  gEyePosW;                   // Offset: 1124, size:   12
    float   gFogStart;                  // Offset: 1136, size:    4
    float   gFogRange;                  // Offset: 1140, size:    4
    float4  gFogColor;                  // Offset: 1152, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    float4x4 gShadowTransform;          // Offset:  256, size:   64
    Material gMaterial;                 // Offset:  320, size:   48
    bool    gUseTexture;                // Offset:  368, size:    4
    bool    gUseNormalMap;              // Offset:  372, size:    4
    bool    gUseAnimation;              // Offset:  376, size:    4
    bool    gRenderingToShadowMap;      // Offset:  380, size:    4
    bool    gUseLighting;               // Offset:  384, size:    4
}

cbuffer cbSkinned
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

//
// 7 local object(s)
//
Texture2D gTexture;
Texture2D gNormalMap;
Texture2D gShadowMap;
SamplerState textureSampler
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState Depth
{
    DepthBias = uint(0x000186a0);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 4 technique(s)
    //
    technique11 BasicTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  320
                //       float4 diffuse;                // Offset:  336
                //       float4 specular;               // Offset:  352
                //
                //   } gMaterial;                       // Offset:  320 Size:    48 [unused]
                //   bool gUseTexture;                  // Offset:  368 Size:     4 [unused]
                //   bool gUseNormalMap;                // Offset:  372 Size:     4 [unused]
                //   bool gUseAnimation;                // Offset:  376 Size:     4
                //   bool gRenderingToShadowMap;        // Offset:  380 Size:     4 [unused]
                //   bool gUseLighting;                 // Offset:  384 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[24], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_output o5.xyzw
                dcl_temps 7
                dcl_indexableTemp x0[4], 4
                
                #line 137 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                ine r0.x, l(0, 0, 0, 0), cb0[23].z
                if_nz r0.x
                
                #line 141
                  mov x0[0].x, v4.x  // weights<0>
                  mov x0[1].x, v4.y  // weights<1>
                  mov x0[2].x, v4.z  // weights<2>
                  mov r0.x, -v4.x
                  add r0.x, r0.x, l(1.000000)
                  mov r0.y, -v4.y
                  add r0.x, r0.y, r0.x
                  mov r0.y, -v4.z
                  add r0.x, r0.y, r0.x
                  mov x0[3].x, r0.x  // weights<3>
                
                #line 149
                  mov r0.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.xyz, l(0,0,0,0)  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.w, l(0)  // i<0>
                  loop 
                    ilt r2.w, r1.w, l(4)
                    breakc_z r2.w
                
                #line 153
                    mov r2.w, r1.w
                    mov r3.x, x0[r2.w + 0].x  // weights<0:Inf>
                    and r4.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                    or r3.yz, r4.yywy, r4.xxzx
                    or r2.w, r3.z, r3.y
                    imul null, r2.w, r2.w, l(4)
                    mov r4.xyz, v0.xyzx
                    mov r4.w, l(1.000000)
                    dp4 r5.x, r4.xyzw, cb1[r2.w + 0].xyzw
                    dp4 r5.y, r4.xyzw, cb1[r2.w + 1].xyzw
                    dp4 r5.z, r4.xyzw, cb1[r2.w + 2].xyzw
                    mul r3.yzw, r3.xxxx, r5.xxyz
                    add r0.xyz, r0.xyzx, r3.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r4.x, v1.xyzx, cb1[r2.w + 0].xyzx
                    dp3 r4.y, v1.xyzx, cb1[r2.w + 1].xyzx
                    dp3 r4.z, v1.xyzx, cb1[r2.w + 2].xyzx
                    mul r3.yzw, r3.xxxx, r4.xxyz
                    add r1.xyz, r1.xyzx, r3.yzwy  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r4.x, v3.xyzx, cb1[r2.w + 0].xyzx
                    dp3 r4.y, v3.xyzx, cb1[r2.w + 1].xyzx
                    dp3 r4.z, v3.xyzx, cb1[r2.w + 2].xyzx
                    mul r3.xyz, r3.xxxx, r4.xyzx
                    add r2.xyz, r2.xyzx, r3.xyzx  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 149
                    iadd r1.w, r1.w, l(1)  // i<0>
                  endloop 
                
                #line 159
                  mov r0.w, l(1.000000)
                  dp4 r3.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                  dp4 r3.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                  dp4 r3.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                  dp3 r4.x, r1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                  dp3 r4.y, r1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                  dp3 r4.z, r1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                  dp3 r1.x, r2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                  dp3 r1.y, r2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                  dp3 r1.z, r2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                  mov r1.w, v3.w  // vout<13>
                
                #line 164
                  dp4 r2.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                  dp4 r2.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                  dp4 r2.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                  dp4 r2.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 167
                  mov r5.xy, v2.xyxx
                  mov r5.zw, l(0,0,0,1.000000)
                  dp4 r6.x, r5.xyzw, cb0[12].xyzw  // vout<14:NaN:Inf>
                  dp4 r6.y, r5.xyzw, cb0[13].xyzw  // vout<15:NaN:Inf>
                
                #line 170
                  dp4 r5.x, r0.xyzw, cb0[16].xyzw  // vout<16:NaN:Inf>
                  dp4 r5.y, r0.xyzw, cb0[17].xyzw  // vout<17:NaN:Inf>
                  dp4 r5.z, r0.xyzw, cb0[18].xyzw  // vout<18:NaN:Inf>
                  dp4 r5.w, r0.xyzw, cb0[19].xyzw  // vout<19:NaN:Inf>
                  mov o0.xyzw, r2.xyzw  // SkinnedVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov o3.xyzw, r1.xyzw  // SkinnedVS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf,13>
                  mov o5.xyzw, r5.xyzw  // SkinnedVS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf,19:NaN:Inf>
                  mov o1.xyz, r3.xyzx  // SkinnedVS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                  mov o2.xyz, r4.xyzx  // SkinnedVS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                  mov o4.xy, r6.xyxx  // SkinnedVS<14:NaN:Inf,15:NaN:Inf>
                  ret 
                
                #line 137
                else 
                
                #line 177
                  mov r0.xyz, v0.xyzx
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                  dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                  dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                  dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                  dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                  dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                  dp4 r3.x, v3.xyzw, cb0[0].xyzw  // vout<10:NaN:Inf>
                  dp4 r3.y, v3.xyzw, cb0[1].xyzw  // vout<11:NaN:Inf>
                  dp4 r3.z, v3.xyzw, cb0[2].xyzw  // vout<12:NaN:Inf>
                  dp4 r3.w, v3.xyzw, cb0[3].xyzw  // vout<13:NaN:Inf>
                
                #line 182
                  dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                  dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                  dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                  dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 185
                  mov r5.xy, v2.xyxx
                  mov r5.zw, l(0,0,0,1.000000)
                  dp4 r6.x, r5.xyzw, cb0[12].xyzw  // vout<14:NaN:Inf>
                  dp4 r6.y, r5.xyzw, cb0[13].xyzw  // vout<15:NaN:Inf>
                
                #line 188
                  dp4 r5.x, r0.xyzw, cb0[16].xyzw  // vout<16:NaN:Inf>
                  dp4 r5.y, r0.xyzw, cb0[17].xyzw  // vout<17:NaN:Inf>
                  dp4 r5.z, r0.xyzw, cb0[18].xyzw  // vout<18:NaN:Inf>
                  dp4 r5.w, r0.xyzw, cb0[19].xyzw  // vout<19:NaN:Inf>
                  mov o0.xyzw, r4.xyzw  // SkinnedVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov o3.xyzw, r3.xyzw  // SkinnedVS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                  mov o5.xyzw, r5.xyzw  // SkinnedVS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf,19:NaN:Inf>
                  mov o1.xyz, r1.xyzx  // SkinnedVS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                  mov o2.xyz, r2.xyzx  // SkinnedVS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                  mov o4.xy, r6.xyxx  // SkinnedVS<14:NaN:Inf,15:NaN:Inf>
                  ret 
                
                #line 137
                endif 
                ret 
                // Approximately 108 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct Light
                //   {
                //       
                //       struct Material
                //       {
                //           
                //           float4 ambient;            // Offset:    0
                //           float4 diffuse;            // Offset:   16
                //           float4 specular;           // Offset:   32
                //
                //       } mat;                         // Offset:    0
                //       float3 pos;                    // Offset:   48
                //       float range;                   // Offset:   60
                //       float3 dir;                    // Offset:   64
                //       float spot;                    // Offset:   76
                //       float3 att;                    // Offset:   80
                //       float type;                    // Offset:   92
                //       float3 intensity;              // Offset:   96
                //       float id;                      // Offset:  108
                //
                //   } gLights[10];                     // Offset:    0 Size:  1120
                //   float gNumLights;                  // Offset: 1120 Size:     4
                //   float3 gEyePosW;                   // Offset: 1124 Size:    12
                //   float gFogStart;                   // Offset: 1136 Size:     4
                //   float gFogRange;                   // Offset: 1140 Size:     4
                //   float4 gFogColor;                  // Offset: 1152 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  320
                //       float4 diffuse;                // Offset:  336
                //       float4 specular;               // Offset:  352
                //
                //   } gMaterial;                       // Offset:  320 Size:    48
                //   bool gUseTexture;                  // Offset:  368 Size:     4
                //   bool gUseNormalMap;                // Offset:  372 Size:     4 [unused]
                //   bool gUseAnimation;                // Offset:  376 Size:     4 [unused]
                //   bool gRenderingToShadowMap;        // Offset:  380 Size:     4
                //   bool gUseLighting;                 // Offset:  384 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // textureSampler                    sampler      NA          NA    0        1
                // samShadow                       sampler_c      NA          NA    1        1
                // gTexture                          texture  float4          2d    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyzw        3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[73], dynamicIndexed
                dcl_constantbuffer cb1[25], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 27
                
                #line 224 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[23].w
                if_nz r0.x
                  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // PS<0: 1f,1: 1f,2: 1f,3: 1f>
                  ret 
                endif 
                
                #line 228
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[70].yzwy
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r1.w, r0.w
                mul r1.xyz, r1.wwww, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 234
                ine r1.w, l(0, 0, 0, 0), cb1[23].x
                if_nz r1.w
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                else 
                  mov r2.xyz, l(1.000000,1.000000,1.000000,0)  // texColor<0: 1f,1: 1f,2: 1f>
                  mov r2.w, l(1.000000)  // texColor<3: 1f>
                endif 
                
                #line 239
                nop 
                mov r3.xyzw, v5.xyzw  // shadowPosH<0,1,2,3>
                
                #line 221 "LightHelper.fx"
                div r3.xyz, r3.zxyz, r3.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 224
                mov r3.x, r3.x  // depth<0:NaN:Inf>
                
                #line 242
                add r4.xy, r3.yzyy, l(-0.000488, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, l(0.000000)  // percentLit<0:[0f,1f]>
                add r4.xy, r3.yzyy, l(0.000000, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,2f]>
                add r4.xy, r3.yzyy, l(0.000488, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,3f]>
                add r4.xy, r3.yzyy, l(-0.000488, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,4f]>
                add r4.xy, r3.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,5f]>
                add r4.xy, r3.yzyy, l(0.000488, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,6f]>
                add r4.xy, r3.yzyy, l(-0.000488, 0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,7f]>
                add r4.xy, r3.yzyy, l(0.000000, 0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,8f]>
                add r3.yz, r3.yyzy, l(0.000000, 0.000488, 0.000488, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.x, r3.yzyy, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.x  // percentLit<0:[0f,9f]>
                
                #line 245
                div r1.w, r1.w, l(9.000000)  // percentLit<0:[0f,1f]>
                mov r1.w, r1.w  // CalcShadowFactor<0:[0f,1f]>
                
                #line 239 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                mov r1.w, r1.w  // shadow<0:[0f,1f]>
                
                #line 243
                ine r3.x, l(0, 0, 0, 0), cb1[24].x
                if_nz r3.x
                  nop 
                  ftoi r3.x, cb0[70].x  // numLights<0>
                  mov r4.xyzw, cb1[22].xyzw  // material<8,9,10,11>
                  mov r3.yzw, cb1[20].xxyz  // material<0,1,2>
                  mov r5.xyz, cb1[21].xyzx  // material<4,5,6>
                  mov r6.xyz, v1.xyzx  // posW<0,1,2>
                  mov r0.xyz, r0.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.xyz, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.xyz, r2.xyzx  // texColor<0:Inf,1:Inf,2:Inf>
                  mov r1.w, r1.w  // shadow<0:[0f,1f]>
                
                #line 168 "LightHelper.fx"
                  mov r7.xyz, l(0,0,0,0)  // ambient<0: -0f,1: -0f,2: -0f>
                
                #line 173
                  mov r5.w, l(0)  // i<0: 0>
                  mov r8.xyz, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r9.xyz, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.w, r5.w  // i<0>
                  loop 
                    ilt r7.w, r6.w, r3.x
                    breakc_z r7.w
                
                #line 178
                    imul null, r7.w, r6.w, l(7)
                    eq r8.w, cb0[r7.w + 5].w, l(0.000000)
                    if_nz r8.w
                      nop 
                      mov r11.xyz, r3.yzwy  // mat<0,1,2>
                      mov r12.xyz, r5.xyzx  // mat<4,5,6>
                      mov r13.xyzw, r4.xyzw  // mat<8,9,10,11>
                      mov r14.xyz, cb0[r7.w + 0].xyzx  // light<0,1,2>
                      mov r15.xyz, cb0[r7.w + 1].xyzx  // light<4,5,6>
                      mov r16.xyz, cb0[r7.w + 2].xyzx  // light<8,9,10>
                      mov r17.xyz, cb0[r7.w + 4].xyzx  // light<16,17,18>
                      mov r18.xyz, cb0[r7.w + 6].xyzx  // light<24,25,26>
                      mov r19.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r20.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 43
                      mov r17.xyz, -r17.xyzx  // lightVec<0,1,2>
                
                #line 46
                      mul r11.xyz, r11.xyzx, r14.xyzx
                      mul r11.xyz, r18.xxxx, r11.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 51
                      dp3 r8.w, r17.xyzx, r19.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 55
                      lt r9.w, l(0.000000), r8.w
                      mov r14.xyz, -r17.xyzx
                      dp3 r10.w, r14.xyzx, r19.xyzx
                      add r10.w, r10.w, r10.w
                      mov r10.w, -r10.w
                      mul r17.xyz, r10.wwww, r19.xyzx
                      add r14.xyz, r14.xyzx, r17.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r10.w, r14.xyzx, r20.xyzx
                      max r10.w, r10.w, l(0.000000)
                      log r10.w, r10.w
                      mul r10.w, r10.w, r13.w
                      exp r10.w, r10.w  // specFactor<0:NaN:Inf>
                      mul r12.xyz, r12.xyzx, r8.wwww
                      mul r12.xyz, r15.xyzx, r12.xyzx
                      mul r12.xyz, r18.yyyy, r12.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mul r13.xyz, r13.xyzx, r10.wwww
                      mul r13.xyz, r16.xyzx, r13.xyzx
                      mul r13.xyz, r18.zzzz, r13.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 55
                      movc r12.xyz, r9.wwww, r12.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      movc r13.xyz, r9.wwww, r13.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 179
                      mov r11.xyz, r11.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r12.xyz, r12.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r13.xyz, r13.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    else 
                      eq r8.w, cb0[r7.w + 5].w, l(1.000000)
                      if_nz r8.w
                        nop 
                        mov r14.xyz, r3.yzwy  // mat<0,1,2>
                        mov r15.xyz, r5.xyzx  // mat<4,5,6>
                        mov r16.xyzw, r4.xyzw  // mat<8,9,10,11>
                        mov r17.xyz, cb0[r7.w + 0].xyzx  // light<0,1,2>
                        mov r18.xyz, cb0[r7.w + 1].xyzx  // light<4,5,6>
                        mov r19.xyz, cb0[r7.w + 2].xyzx  // light<8,9,10>
                        mov r20.xyz, cb0[r7.w + 3].xyzx  // light<12,13,14>
                        mov r21.xyz, cb0[r7.w + 5].xyzx  // light<20,21,22>
                        mov r8.w, cb0[r7.w + 3].w  // light<15>
                        mov r22.xyz, cb0[r7.w + 6].xyzx  // light<24,25,26>
                        mov r23.xyz, r6.xyzx  // pos<0,1,2>
                        mov r24.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        mov r25.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 74
                        mov r23.xyz, -r23.xyzx
                        add r20.xyz, r20.xyzx, r23.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 77
                        dp3 r9.w, r20.xyzx, r20.xyzx
                        sqrt r23.y, r9.w  // d<0:NaN:Inf>
                
                #line 80
                        lt r8.w, r8.w, r23.y
                
                #line 84
                        if_z r8.w
                          div r20.xyz, r20.xyzx, r23.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                          mul r14.xyz, r14.xyzx, r17.xyzx
                          mul r11.xyz, r22.xxxx, r14.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 92
                          dp3 r8.w, r20.xyzx, r24.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 96
                          lt r9.w, l(0.000000), r8.w
                          mov r14.xyz, -r20.xyzx
                          dp3 r10.w, r14.xyzx, r24.xyzx
                          add r10.w, r10.w, r10.w
                          mov r10.w, -r10.w
                          mul r17.xyz, r10.wwww, r24.xyzx
                          add r14.xyz, r14.xyzx, r17.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          dp3 r10.w, r14.xyzx, r25.xyzx
                          max r10.w, r10.w, l(0.000000)
                          log r10.w, r10.w
                          mul r10.w, r10.w, r16.w
                          exp r10.w, r10.w  // specFactor<0:NaN:Inf>
                          mul r14.xyz, r15.xyzx, r8.wwww
                          mul r14.xyz, r18.xyzx, r14.xyzx
                          mul r14.xyz, r22.yyyy, r14.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mul r15.xyz, r16.xyzx, r10.wwww
                          mul r15.xyz, r19.xyzx, r15.xyzx
                          mul r15.xyz, r22.zzzz, r15.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 96
                          movc r14.xyz, r9.wwww, r14.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          movc r15.xyz, r9.wwww, r15.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 106
                          mul r23.z, r23.y, r23.y
                          mov r23.x, l(1.000000)
                          dp3 r8.w, r21.xyzx, r23.xyzx
                          div r8.w, l(1.000000), r8.w  // att<0:NaN:Inf>
                          mul r12.xyz, r8.wwww, r14.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mul r13.xyz, r8.wwww, r15.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 84
                        else 
                          mov r11.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                          mov r12.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                          mov r13.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                        endif 
                
                #line 181
                        mov r11.xyz, r11.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        mov r12.xyz, r12.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        mov r13.xyz, r13.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      else 
                        eq r8.w, cb0[r7.w + 5].w, l(2.000000)
                        if_nz r8.w
                          nop 
                          mov r14.xyz, r3.yzwy  // mat<0,1,2>
                          mov r15.xyz, r5.xyzx  // mat<4,5,6>
                          mov r16.xyzw, r4.xyzw  // mat<8,9,10,11>
                          mov r17.xyz, cb0[r7.w + 0].xyzx  // light<0,1,2>
                          mov r18.xyz, cb0[r7.w + 1].xyzx  // light<4,5,6>
                          mov r19.xyz, cb0[r7.w + 2].xyzx  // light<8,9,10>
                          mov r20.xyz, cb0[r7.w + 3].xyzx  // light<12,13,14>
                          mov r21.xyz, cb0[r7.w + 4].xyzx  // light<16,17,18>
                          mov r22.xyz, cb0[r7.w + 5].xyzx  // light<20,21,22>
                          mov r8.w, cb0[r7.w + 3].w  // light<15>
                          mov r9.w, cb0[r7.w + 4].w  // light<19>
                          mov r23.xyz, cb0[r7.w + 6].xyzx  // light<24,25,26>
                          mov r24.xyz, r6.xyzx  // pos<0,1,2>
                          mov r25.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mov r26.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                          mov r24.xyz, -r24.xyzx
                          add r20.xyz, r20.xyzx, r24.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 124
                          dp3 r7.w, r20.xyzx, r20.xyzx
                          sqrt r24.y, r7.w  // d<0:NaN:Inf>
                
                #line 127
                          lt r7.w, r8.w, r24.y
                
                #line 131
                          if_z r7.w
                            div r20.xyz, r20.xyzx, r24.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 134
                            mul r14.xyz, r14.xyzx, r17.xyzx
                            mul r14.xyz, r23.xxxx, r14.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 139
                            dp3 r7.w, r20.xyzx, r25.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 143
                            lt r8.w, l(0.000000), r7.w
                            mov r17.xyz, -r20.xyzx
                            dp3 r10.w, r17.xyzx, r25.xyzx
                            add r10.w, r10.w, r10.w
                            mov r10.w, -r10.w
                            mul r20.xyz, r10.wwww, r25.xyzx
                            add r20.xyz, r17.xyzx, r20.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            dp3 r10.w, r20.xyzx, r26.xyzx
                            max r10.w, r10.w, l(0.000000)
                            log r10.w, r10.w
                            mul r10.w, r10.w, r16.w
                            exp r10.w, r10.w  // specFactor<0:NaN:Inf>
                            mul r15.xyz, r15.xyzx, r7.wwww
                            mul r15.xyz, r18.xyzx, r15.xyzx
                            mul r15.xyz, r23.yyyy, r15.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            mul r16.xyz, r16.xyzx, r10.wwww
                            mul r16.xyz, r19.xyzx, r16.xyzx
                            mul r16.xyz, r23.zzzz, r16.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 143
                            movc r15.xyz, r8.wwww, r15.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            movc r16.xyz, r8.wwww, r16.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 153
                            dp3 r7.w, r17.xyzx, r21.xyzx
                            max r7.w, r7.w, l(0.000000)
                            log r7.w, r7.w
                            mul r7.w, r7.w, r9.w
                            exp r7.w, r7.w  // spot<0:NaN:Inf>
                
                #line 156
                            mul r24.z, r24.y, r24.y
                            mov r24.x, l(1.000000)
                            dp3 r8.w, r22.xyzx, r24.xyzx
                            div r8.w, r7.w, r8.w  // att<0:NaN:Inf>
                            mul r11.xyz, r7.wwww, r14.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            mul r12.xyz, r8.wwww, r15.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            mul r13.xyz, r8.wwww, r16.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                          else 
                            mov r11.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                            mov r12.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                            mov r13.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                          endif 
                
                #line 183
                          mov r11.xyz, r11.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mov r12.xyz, r12.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mov r13.xyz, r13.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        endif 
                      endif 
                    endif 
                
                #line 185
                    add r8.xyz, r8.xyzx, r11.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r11.xyz, r1.wwww, r12.xyzx
                    add r9.xyz, r9.xyzx, r11.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r11.xyz, r1.wwww, r13.xyzx
                    add r10.xyz, r10.xyzx, r11.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 173
                    iadd r6.w, r6.w, l(1)  // i<0>
                  endloop 
                
                #line 190
                  add r0.xyz, r8.xyzx, r9.xyzx
                  mul r0.xyz, r0.xyzx, r2.xyzx
                  add r0.xyz, r10.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 244 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                  mov r0.xyz, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                else 
                
                #line 246
                  add r1.xyz, cb1[20].xyzx, cb1[21].xyzx
                  mul r1.xyz, r1.xyzx, r2.xyzx
                  add r0.xyz, r1.xyzx, cb1[22].xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 243
                endif 
                
                #line 249
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                mov r1.x, -cb0[71].x
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[71].y
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 253
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[72].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                mul r0.w, r2.w, cb1[21].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 279 instruction slots used
                            
            };
        }

    }

    technique11 SkinnedTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  320
                //       float4 diffuse;                // Offset:  336
                //       float4 specular;               // Offset:  352
                //
                //   } gMaterial;                       // Offset:  320 Size:    48 [unused]
                //   bool gUseTexture;                  // Offset:  368 Size:     4 [unused]
                //   bool gUseNormalMap;                // Offset:  372 Size:     4 [unused]
                //   bool gUseAnimation;                // Offset:  376 Size:     4
                //   bool gRenderingToShadowMap;        // Offset:  380 Size:     4 [unused]
                //   bool gUseLighting;                 // Offset:  384 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[24], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_output o5.xyzw
                dcl_temps 7
                dcl_indexableTemp x0[4], 4
                
                #line 137 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                ine r0.x, l(0, 0, 0, 0), cb0[23].z
                if_nz r0.x
                
                #line 141
                  mov x0[0].x, v4.x  // weights<0>
                  mov x0[1].x, v4.y  // weights<1>
                  mov x0[2].x, v4.z  // weights<2>
                  mov r0.x, -v4.x
                  add r0.x, r0.x, l(1.000000)
                  mov r0.y, -v4.y
                  add r0.x, r0.y, r0.x
                  mov r0.y, -v4.z
                  add r0.x, r0.y, r0.x
                  mov x0[3].x, r0.x  // weights<3>
                
                #line 149
                  mov r0.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.xyz, l(0,0,0,0)  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.w, l(0)  // i<0>
                  loop 
                    ilt r2.w, r1.w, l(4)
                    breakc_z r2.w
                
                #line 153
                    mov r2.w, r1.w
                    mov r3.x, x0[r2.w + 0].x  // weights<0:Inf>
                    and r4.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                    or r3.yz, r4.yywy, r4.xxzx
                    or r2.w, r3.z, r3.y
                    imul null, r2.w, r2.w, l(4)
                    mov r4.xyz, v0.xyzx
                    mov r4.w, l(1.000000)
                    dp4 r5.x, r4.xyzw, cb1[r2.w + 0].xyzw
                    dp4 r5.y, r4.xyzw, cb1[r2.w + 1].xyzw
                    dp4 r5.z, r4.xyzw, cb1[r2.w + 2].xyzw
                    mul r3.yzw, r3.xxxx, r5.xxyz
                    add r0.xyz, r0.xyzx, r3.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r4.x, v1.xyzx, cb1[r2.w + 0].xyzx
                    dp3 r4.y, v1.xyzx, cb1[r2.w + 1].xyzx
                    dp3 r4.z, v1.xyzx, cb1[r2.w + 2].xyzx
                    mul r3.yzw, r3.xxxx, r4.xxyz
                    add r1.xyz, r1.xyzx, r3.yzwy  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r4.x, v3.xyzx, cb1[r2.w + 0].xyzx
                    dp3 r4.y, v3.xyzx, cb1[r2.w + 1].xyzx
                    dp3 r4.z, v3.xyzx, cb1[r2.w + 2].xyzx
                    mul r3.xyz, r3.xxxx, r4.xyzx
                    add r2.xyz, r2.xyzx, r3.xyzx  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 149
                    iadd r1.w, r1.w, l(1)  // i<0>
                  endloop 
                
                #line 159
                  mov r0.w, l(1.000000)
                  dp4 r3.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                  dp4 r3.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                  dp4 r3.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                  dp3 r4.x, r1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                  dp3 r4.y, r1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                  dp3 r4.z, r1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                  dp3 r1.x, r2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                  dp3 r1.y, r2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                  dp3 r1.z, r2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                  mov r1.w, v3.w  // vout<13>
                
                #line 164
                  dp4 r2.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                  dp4 r2.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                  dp4 r2.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                  dp4 r2.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 167
                  mov r5.xy, v2.xyxx
                  mov r5.zw, l(0,0,0,1.000000)
                  dp4 r6.x, r5.xyzw, cb0[12].xyzw  // vout<14:NaN:Inf>
                  dp4 r6.y, r5.xyzw, cb0[13].xyzw  // vout<15:NaN:Inf>
                
                #line 170
                  dp4 r5.x, r0.xyzw, cb0[16].xyzw  // vout<16:NaN:Inf>
                  dp4 r5.y, r0.xyzw, cb0[17].xyzw  // vout<17:NaN:Inf>
                  dp4 r5.z, r0.xyzw, cb0[18].xyzw  // vout<18:NaN:Inf>
                  dp4 r5.w, r0.xyzw, cb0[19].xyzw  // vout<19:NaN:Inf>
                  mov o0.xyzw, r2.xyzw  // SkinnedVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov o3.xyzw, r1.xyzw  // SkinnedVS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf,13>
                  mov o5.xyzw, r5.xyzw  // SkinnedVS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf,19:NaN:Inf>
                  mov o1.xyz, r3.xyzx  // SkinnedVS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                  mov o2.xyz, r4.xyzx  // SkinnedVS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                  mov o4.xy, r6.xyxx  // SkinnedVS<14:NaN:Inf,15:NaN:Inf>
                  ret 
                
                #line 137
                else 
                
                #line 177
                  mov r0.xyz, v0.xyzx
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                  dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                  dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                  dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                  dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                  dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                  dp4 r3.x, v3.xyzw, cb0[0].xyzw  // vout<10:NaN:Inf>
                  dp4 r3.y, v3.xyzw, cb0[1].xyzw  // vout<11:NaN:Inf>
                  dp4 r3.z, v3.xyzw, cb0[2].xyzw  // vout<12:NaN:Inf>
                  dp4 r3.w, v3.xyzw, cb0[3].xyzw  // vout<13:NaN:Inf>
                
                #line 182
                  dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                  dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                  dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                  dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 185
                  mov r5.xy, v2.xyxx
                  mov r5.zw, l(0,0,0,1.000000)
                  dp4 r6.x, r5.xyzw, cb0[12].xyzw  // vout<14:NaN:Inf>
                  dp4 r6.y, r5.xyzw, cb0[13].xyzw  // vout<15:NaN:Inf>
                
                #line 188
                  dp4 r5.x, r0.xyzw, cb0[16].xyzw  // vout<16:NaN:Inf>
                  dp4 r5.y, r0.xyzw, cb0[17].xyzw  // vout<17:NaN:Inf>
                  dp4 r5.z, r0.xyzw, cb0[18].xyzw  // vout<18:NaN:Inf>
                  dp4 r5.w, r0.xyzw, cb0[19].xyzw  // vout<19:NaN:Inf>
                  mov o0.xyzw, r4.xyzw  // SkinnedVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov o3.xyzw, r3.xyzw  // SkinnedVS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                  mov o5.xyzw, r5.xyzw  // SkinnedVS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf,19:NaN:Inf>
                  mov o1.xyz, r1.xyzx  // SkinnedVS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                  mov o2.xyz, r2.xyzx  // SkinnedVS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                  mov o4.xy, r6.xyxx  // SkinnedVS<14:NaN:Inf,15:NaN:Inf>
                  ret 
                
                #line 137
                endif 
                ret 
                // Approximately 108 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct Light
                //   {
                //       
                //       struct Material
                //       {
                //           
                //           float4 ambient;            // Offset:    0
                //           float4 diffuse;            // Offset:   16
                //           float4 specular;           // Offset:   32
                //
                //       } mat;                         // Offset:    0
                //       float3 pos;                    // Offset:   48
                //       float range;                   // Offset:   60
                //       float3 dir;                    // Offset:   64
                //       float spot;                    // Offset:   76
                //       float3 att;                    // Offset:   80
                //       float type;                    // Offset:   92
                //       float3 intensity;              // Offset:   96
                //       float id;                      // Offset:  108
                //
                //   } gLights[10];                     // Offset:    0 Size:  1120
                //   float gNumLights;                  // Offset: 1120 Size:     4
                //   float3 gEyePosW;                   // Offset: 1124 Size:    12
                //   float gFogStart;                   // Offset: 1136 Size:     4
                //   float gFogRange;                   // Offset: 1140 Size:     4
                //   float4 gFogColor;                  // Offset: 1152 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  320
                //       float4 diffuse;                // Offset:  336
                //       float4 specular;               // Offset:  352
                //
                //   } gMaterial;                       // Offset:  320 Size:    48
                //   bool gUseTexture;                  // Offset:  368 Size:     4
                //   bool gUseNormalMap;                // Offset:  372 Size:     4 [unused]
                //   bool gUseAnimation;                // Offset:  376 Size:     4 [unused]
                //   bool gRenderingToShadowMap;        // Offset:  380 Size:     4
                //   bool gUseLighting;                 // Offset:  384 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // textureSampler                    sampler      NA          NA    0        1
                // samShadow                       sampler_c      NA          NA    1        1
                // gTexture                          texture  float4          2d    0        1
                // gShadowMap                        texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyzw        3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[73], dynamicIndexed
                dcl_constantbuffer cb1[25], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 27
                
                #line 224 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[23].w
                if_nz r0.x
                  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // PS<0: 1f,1: 1f,2: 1f,3: 1f>
                  ret 
                endif 
                
                #line 228
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[70].yzwy
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r1.w, r0.w
                mul r1.xyz, r1.wwww, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 234
                ine r1.w, l(0, 0, 0, 0), cb1[23].x
                if_nz r1.w
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v4.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                else 
                  mov r2.xyz, l(1.000000,1.000000,1.000000,0)  // texColor<0: 1f,1: 1f,2: 1f>
                  mov r2.w, l(1.000000)  // texColor<3: 1f>
                endif 
                
                #line 239
                nop 
                mov r3.xyzw, v5.xyzw  // shadowPosH<0,1,2,3>
                
                #line 221 "LightHelper.fx"
                div r3.xyz, r3.zxyz, r3.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 224
                mov r3.x, r3.x  // depth<0:NaN:Inf>
                
                #line 242
                add r4.xy, r3.yzyy, l(-0.000488, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, l(0.000000)  // percentLit<0:[0f,1f]>
                add r4.xy, r3.yzyy, l(0.000000, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,2f]>
                add r4.xy, r3.yzyy, l(0.000488, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,3f]>
                add r4.xy, r3.yzyy, l(-0.000488, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,4f]>
                add r4.xy, r3.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,5f]>
                add r4.xy, r3.yzyy, l(0.000488, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,6f]>
                add r4.xy, r3.yzyy, l(-0.000488, 0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,7f]>
                add r4.xy, r3.yzyy, l(0.000000, 0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r4.xyxx, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.w  // percentLit<0:[0f,8f]>
                add r3.yz, r3.yyzy, l(0.000000, 0.000488, 0.000488, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r3.x, r3.yzyy, t1.xxxx, s1, r3.x
                add r1.w, r1.w, r3.x  // percentLit<0:[0f,9f]>
                
                #line 245
                div r1.w, r1.w, l(9.000000)  // percentLit<0:[0f,1f]>
                mov r1.w, r1.w  // CalcShadowFactor<0:[0f,1f]>
                
                #line 239 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                mov r1.w, r1.w  // shadow<0:[0f,1f]>
                
                #line 243
                ine r3.x, l(0, 0, 0, 0), cb1[24].x
                if_nz r3.x
                  nop 
                  ftoi r3.x, cb0[70].x  // numLights<0>
                  mov r4.xyzw, cb1[22].xyzw  // material<8,9,10,11>
                  mov r3.yzw, cb1[20].xxyz  // material<0,1,2>
                  mov r5.xyz, cb1[21].xyzx  // material<4,5,6>
                  mov r6.xyz, v1.xyzx  // posW<0,1,2>
                  mov r0.xyz, r0.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.xyz, r1.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.xyz, r2.xyzx  // texColor<0:Inf,1:Inf,2:Inf>
                  mov r1.w, r1.w  // shadow<0:[0f,1f]>
                
                #line 168 "LightHelper.fx"
                  mov r7.xyz, l(0,0,0,0)  // ambient<0: -0f,1: -0f,2: -0f>
                
                #line 173
                  mov r5.w, l(0)  // i<0: 0>
                  mov r8.xyz, r7.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r9.xyz, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r7.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r6.w, r5.w  // i<0>
                  loop 
                    ilt r7.w, r6.w, r3.x
                    breakc_z r7.w
                
                #line 178
                    imul null, r7.w, r6.w, l(7)
                    eq r8.w, cb0[r7.w + 5].w, l(0.000000)
                    if_nz r8.w
                      nop 
                      mov r11.xyz, r3.yzwy  // mat<0,1,2>
                      mov r12.xyz, r5.xyzx  // mat<4,5,6>
                      mov r13.xyzw, r4.xyzw  // mat<8,9,10,11>
                      mov r14.xyz, cb0[r7.w + 0].xyzx  // light<0,1,2>
                      mov r15.xyz, cb0[r7.w + 1].xyzx  // light<4,5,6>
                      mov r16.xyz, cb0[r7.w + 2].xyzx  // light<8,9,10>
                      mov r17.xyz, cb0[r7.w + 4].xyzx  // light<16,17,18>
                      mov r18.xyz, cb0[r7.w + 6].xyzx  // light<24,25,26>
                      mov r19.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r20.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 43
                      mov r17.xyz, -r17.xyzx  // lightVec<0,1,2>
                
                #line 46
                      mul r11.xyz, r11.xyzx, r14.xyzx
                      mul r11.xyz, r18.xxxx, r11.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 51
                      dp3 r8.w, r17.xyzx, r19.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 55
                      lt r9.w, l(0.000000), r8.w
                      mov r14.xyz, -r17.xyzx
                      dp3 r10.w, r14.xyzx, r19.xyzx
                      add r10.w, r10.w, r10.w
                      mov r10.w, -r10.w
                      mul r17.xyz, r10.wwww, r19.xyzx
                      add r14.xyz, r14.xyzx, r17.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r10.w, r14.xyzx, r20.xyzx
                      max r10.w, r10.w, l(0.000000)
                      log r10.w, r10.w
                      mul r10.w, r10.w, r13.w
                      exp r10.w, r10.w  // specFactor<0:NaN:Inf>
                      mul r12.xyz, r12.xyzx, r8.wwww
                      mul r12.xyz, r15.xyzx, r12.xyzx
                      mul r12.xyz, r18.yyyy, r12.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mul r13.xyz, r13.xyzx, r10.wwww
                      mul r13.xyz, r16.xyzx, r13.xyzx
                      mul r13.xyz, r18.zzzz, r13.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 55
                      movc r12.xyz, r9.wwww, r12.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      movc r13.xyz, r9.wwww, r13.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 179
                      mov r11.xyz, r11.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r12.xyz, r12.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r13.xyz, r13.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    else 
                      eq r8.w, cb0[r7.w + 5].w, l(1.000000)
                      if_nz r8.w
                        nop 
                        mov r14.xyz, r3.yzwy  // mat<0,1,2>
                        mov r15.xyz, r5.xyzx  // mat<4,5,6>
                        mov r16.xyzw, r4.xyzw  // mat<8,9,10,11>
                        mov r17.xyz, cb0[r7.w + 0].xyzx  // light<0,1,2>
                        mov r18.xyz, cb0[r7.w + 1].xyzx  // light<4,5,6>
                        mov r19.xyz, cb0[r7.w + 2].xyzx  // light<8,9,10>
                        mov r20.xyz, cb0[r7.w + 3].xyzx  // light<12,13,14>
                        mov r21.xyz, cb0[r7.w + 5].xyzx  // light<20,21,22>
                        mov r8.w, cb0[r7.w + 3].w  // light<15>
                        mov r22.xyz, cb0[r7.w + 6].xyzx  // light<24,25,26>
                        mov r23.xyz, r6.xyzx  // pos<0,1,2>
                        mov r24.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        mov r25.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 74
                        mov r23.xyz, -r23.xyzx
                        add r20.xyz, r20.xyzx, r23.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 77
                        dp3 r9.w, r20.xyzx, r20.xyzx
                        sqrt r23.y, r9.w  // d<0:NaN:Inf>
                
                #line 80
                        lt r8.w, r8.w, r23.y
                
                #line 84
                        if_z r8.w
                          div r20.xyz, r20.xyzx, r23.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                          mul r14.xyz, r14.xyzx, r17.xyzx
                          mul r11.xyz, r22.xxxx, r14.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 92
                          dp3 r8.w, r20.xyzx, r24.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 96
                          lt r9.w, l(0.000000), r8.w
                          mov r14.xyz, -r20.xyzx
                          dp3 r10.w, r14.xyzx, r24.xyzx
                          add r10.w, r10.w, r10.w
                          mov r10.w, -r10.w
                          mul r17.xyz, r10.wwww, r24.xyzx
                          add r14.xyz, r14.xyzx, r17.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          dp3 r10.w, r14.xyzx, r25.xyzx
                          max r10.w, r10.w, l(0.000000)
                          log r10.w, r10.w
                          mul r10.w, r10.w, r16.w
                          exp r10.w, r10.w  // specFactor<0:NaN:Inf>
                          mul r14.xyz, r15.xyzx, r8.wwww
                          mul r14.xyz, r18.xyzx, r14.xyzx
                          mul r14.xyz, r22.yyyy, r14.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mul r15.xyz, r16.xyzx, r10.wwww
                          mul r15.xyz, r19.xyzx, r15.xyzx
                          mul r15.xyz, r22.zzzz, r15.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 96
                          movc r14.xyz, r9.wwww, r14.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          movc r15.xyz, r9.wwww, r15.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 106
                          mul r23.z, r23.y, r23.y
                          mov r23.x, l(1.000000)
                          dp3 r8.w, r21.xyzx, r23.xyzx
                          div r8.w, l(1.000000), r8.w  // att<0:NaN:Inf>
                          mul r12.xyz, r8.wwww, r14.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mul r13.xyz, r8.wwww, r15.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 84
                        else 
                          mov r11.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                          mov r12.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                          mov r13.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                        endif 
                
                #line 181
                        mov r11.xyz, r11.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        mov r12.xyz, r12.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        mov r13.xyz, r13.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      else 
                        eq r8.w, cb0[r7.w + 5].w, l(2.000000)
                        if_nz r8.w
                          nop 
                          mov r14.xyz, r3.yzwy  // mat<0,1,2>
                          mov r15.xyz, r5.xyzx  // mat<4,5,6>
                          mov r16.xyzw, r4.xyzw  // mat<8,9,10,11>
                          mov r17.xyz, cb0[r7.w + 0].xyzx  // light<0,1,2>
                          mov r18.xyz, cb0[r7.w + 1].xyzx  // light<4,5,6>
                          mov r19.xyz, cb0[r7.w + 2].xyzx  // light<8,9,10>
                          mov r20.xyz, cb0[r7.w + 3].xyzx  // light<12,13,14>
                          mov r21.xyz, cb0[r7.w + 4].xyzx  // light<16,17,18>
                          mov r22.xyz, cb0[r7.w + 5].xyzx  // light<20,21,22>
                          mov r8.w, cb0[r7.w + 3].w  // light<15>
                          mov r9.w, cb0[r7.w + 4].w  // light<19>
                          mov r23.xyz, cb0[r7.w + 6].xyzx  // light<24,25,26>
                          mov r24.xyz, r6.xyzx  // pos<0,1,2>
                          mov r25.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mov r26.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                          mov r24.xyz, -r24.xyzx
                          add r20.xyz, r20.xyzx, r24.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 124
                          dp3 r7.w, r20.xyzx, r20.xyzx
                          sqrt r24.y, r7.w  // d<0:NaN:Inf>
                
                #line 127
                          lt r7.w, r8.w, r24.y
                
                #line 131
                          if_z r7.w
                            div r20.xyz, r20.xyzx, r24.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 134
                            mul r14.xyz, r14.xyzx, r17.xyzx
                            mul r14.xyz, r23.xxxx, r14.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 139
                            dp3 r7.w, r20.xyzx, r25.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 143
                            lt r8.w, l(0.000000), r7.w
                            mov r17.xyz, -r20.xyzx
                            dp3 r10.w, r17.xyzx, r25.xyzx
                            add r10.w, r10.w, r10.w
                            mov r10.w, -r10.w
                            mul r20.xyz, r10.wwww, r25.xyzx
                            add r20.xyz, r17.xyzx, r20.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            dp3 r10.w, r20.xyzx, r26.xyzx
                            max r10.w, r10.w, l(0.000000)
                            log r10.w, r10.w
                            mul r10.w, r10.w, r16.w
                            exp r10.w, r10.w  // specFactor<0:NaN:Inf>
                            mul r15.xyz, r15.xyzx, r7.wwww
                            mul r15.xyz, r18.xyzx, r15.xyzx
                            mul r15.xyz, r23.yyyy, r15.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            mul r16.xyz, r16.xyzx, r10.wwww
                            mul r16.xyz, r19.xyzx, r16.xyzx
                            mul r16.xyz, r23.zzzz, r16.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 143
                            movc r15.xyz, r8.wwww, r15.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            movc r16.xyz, r8.wwww, r16.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 153
                            dp3 r7.w, r17.xyzx, r21.xyzx
                            max r7.w, r7.w, l(0.000000)
                            log r7.w, r7.w
                            mul r7.w, r7.w, r9.w
                            exp r7.w, r7.w  // spot<0:NaN:Inf>
                
                #line 156
                            mul r24.z, r24.y, r24.y
                            mov r24.x, l(1.000000)
                            dp3 r8.w, r22.xyzx, r24.xyzx
                            div r8.w, r7.w, r8.w  // att<0:NaN:Inf>
                            mul r11.xyz, r7.wwww, r14.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            mul r12.xyz, r8.wwww, r15.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            mul r13.xyz, r8.wwww, r16.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                          else 
                            mov r11.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                            mov r12.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                            mov r13.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                          endif 
                
                #line 183
                          mov r11.xyz, r11.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mov r12.xyz, r12.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mov r13.xyz, r13.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        endif 
                      endif 
                    endif 
                
                #line 185
                    add r8.xyz, r8.xyzx, r11.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r11.xyz, r1.wwww, r12.xyzx
                    add r9.xyz, r9.xyzx, r11.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r11.xyz, r1.wwww, r13.xyzx
                    add r10.xyz, r10.xyzx, r11.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 173
                    iadd r6.w, r6.w, l(1)  // i<0>
                  endloop 
                
                #line 190
                  add r0.xyz, r8.xyzx, r9.xyzx
                  mul r0.xyz, r0.xyzx, r2.xyzx
                  add r0.xyz, r10.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 244 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                  mov r0.xyz, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                else 
                
                #line 246
                  add r1.xyz, cb1[20].xyzx, cb1[21].xyzx
                  mul r1.xyz, r1.xyzx, r2.xyzx
                  add r0.xyz, r1.xyzx, cb1[22].xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 243
                endif 
                
                #line 249
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                mov r1.x, -cb0[71].x
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[71].y
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 253
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[72].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                mul r0.w, r2.w, cb1[21].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 279 instruction slots used
                            
            };
        }

    }

    technique11 NormalMapTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   float4x4 gShadowTransform;         // Offset:  256 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  320
                //       float4 diffuse;                // Offset:  336
                //       float4 specular;               // Offset:  352
                //
                //   } gMaterial;                       // Offset:  320 Size:    48 [unused]
                //   bool gUseTexture;                  // Offset:  368 Size:     4 [unused]
                //   bool gUseNormalMap;                // Offset:  372 Size:     4 [unused]
                //   bool gUseAnimation;                // Offset:  376 Size:     4
                //   bool gRenderingToShadowMap;        // Offset:  380 Size:     4 [unused]
                //   bool gUseLighting;                 // Offset:  384 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[24], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_output o5.xyzw
                dcl_temps 7
                dcl_indexableTemp x0[4], 4
                
                #line 137 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                ine r0.x, l(0, 0, 0, 0), cb0[23].z
                if_nz r0.x
                
                #line 141
                  mov x0[0].x, v4.x  // weights<0>
                  mov x0[1].x, v4.y  // weights<1>
                  mov x0[2].x, v4.z  // weights<2>
                  mov r0.x, -v4.x
                  add r0.x, r0.x, l(1.000000)
                  mov r0.y, -v4.y
                  add r0.x, r0.y, r0.x
                  mov r0.y, -v4.z
                  add r0.x, r0.y, r0.x
                  mov x0[3].x, r0.x  // weights<3>
                
                #line 149
                  mov r0.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.xyz, l(0,0,0,0)  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.xyz, l(0,0,0,0)  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.w, l(0)  // i<0>
                  loop 
                    ilt r2.w, r1.w, l(4)
                    breakc_z r2.w
                
                #line 153
                    mov r2.w, r1.w
                    mov r3.x, x0[r2.w + 0].x  // weights<0:Inf>
                    and r4.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                    or r3.yz, r4.yywy, r4.xxzx
                    or r2.w, r3.z, r3.y
                    imul null, r2.w, r2.w, l(4)
                    mov r4.xyz, v0.xyzx
                    mov r4.w, l(1.000000)
                    dp4 r5.x, r4.xyzw, cb1[r2.w + 0].xyzw
                    dp4 r5.y, r4.xyzw, cb1[r2.w + 1].xyzw
                    dp4 r5.z, r4.xyzw, cb1[r2.w + 2].xyzw
                    mul r3.yzw, r3.xxxx, r5.xxyz
                    add r0.xyz, r0.xyzx, r3.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r4.x, v1.xyzx, cb1[r2.w + 0].xyzx
                    dp3 r4.y, v1.xyzx, cb1[r2.w + 1].xyzx
                    dp3 r4.z, v1.xyzx, cb1[r2.w + 2].xyzx
                    mul r3.yzw, r3.xxxx, r4.xxyz
                    add r1.xyz, r1.xyzx, r3.yzwy  // normalL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    dp3 r4.x, v3.xyzx, cb1[r2.w + 0].xyzx
                    dp3 r4.y, v3.xyzx, cb1[r2.w + 1].xyzx
                    dp3 r4.z, v3.xyzx, cb1[r2.w + 2].xyzx
                    mul r3.xyz, r3.xxxx, r4.xyzx
                    add r2.xyz, r2.xyzx, r3.xyzx  // tangentL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 149
                    iadd r1.w, r1.w, l(1)  // i<0>
                  endloop 
                
                #line 159
                  mov r0.w, l(1.000000)
                  dp4 r3.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                  dp4 r3.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                  dp4 r3.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                  dp3 r4.x, r1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                  dp3 r4.y, r1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                  dp3 r4.z, r1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                  dp3 r1.x, r2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                  dp3 r1.y, r2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                  dp3 r1.z, r2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                  mov r1.w, v3.w  // vout<13>
                
                #line 164
                  dp4 r2.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                  dp4 r2.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                  dp4 r2.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                  dp4 r2.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 167
                  mov r5.xy, v2.xyxx
                  mov r5.zw, l(0,0,0,1.000000)
                  dp4 r6.x, r5.xyzw, cb0[12].xyzw  // vout<14:NaN:Inf>
                  dp4 r6.y, r5.xyzw, cb0[13].xyzw  // vout<15:NaN:Inf>
                
                #line 170
                  dp4 r5.x, r0.xyzw, cb0[16].xyzw  // vout<16:NaN:Inf>
                  dp4 r5.y, r0.xyzw, cb0[17].xyzw  // vout<17:NaN:Inf>
                  dp4 r5.z, r0.xyzw, cb0[18].xyzw  // vout<18:NaN:Inf>
                  dp4 r5.w, r0.xyzw, cb0[19].xyzw  // vout<19:NaN:Inf>
                  mov o0.xyzw, r2.xyzw  // SkinnedVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov o3.xyzw, r1.xyzw  // SkinnedVS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf,13>
                  mov o5.xyzw, r5.xyzw  // SkinnedVS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf,19:NaN:Inf>
                  mov o1.xyz, r3.xyzx  // SkinnedVS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                  mov o2.xyz, r4.xyzx  // SkinnedVS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                  mov o4.xy, r6.xyxx  // SkinnedVS<14:NaN:Inf,15:NaN:Inf>
                  ret 
                
                #line 137
                else 
                
                #line 177
                  mov r0.xyz, v0.xyzx
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                  dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                  dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                  dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                  dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                  dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                  dp4 r3.x, v3.xyzw, cb0[0].xyzw  // vout<10:NaN:Inf>
                  dp4 r3.y, v3.xyzw, cb0[1].xyzw  // vout<11:NaN:Inf>
                  dp4 r3.z, v3.xyzw, cb0[2].xyzw  // vout<12:NaN:Inf>
                  dp4 r3.w, v3.xyzw, cb0[3].xyzw  // vout<13:NaN:Inf>
                
                #line 182
                  dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                  dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                  dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                  dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 185
                  mov r5.xy, v2.xyxx
                  mov r5.zw, l(0,0,0,1.000000)
                  dp4 r6.x, r5.xyzw, cb0[12].xyzw  // vout<14:NaN:Inf>
                  dp4 r6.y, r5.xyzw, cb0[13].xyzw  // vout<15:NaN:Inf>
                
                #line 188
                  dp4 r5.x, r0.xyzw, cb0[16].xyzw  // vout<16:NaN:Inf>
                  dp4 r5.y, r0.xyzw, cb0[17].xyzw  // vout<17:NaN:Inf>
                  dp4 r5.z, r0.xyzw, cb0[18].xyzw  // vout<18:NaN:Inf>
                  dp4 r5.w, r0.xyzw, cb0[19].xyzw  // vout<19:NaN:Inf>
                  mov o0.xyzw, r4.xyzw  // SkinnedVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                  mov o3.xyzw, r3.xyzw  // SkinnedVS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf,13:NaN:Inf>
                  mov o5.xyzw, r5.xyzw  // SkinnedVS<16:NaN:Inf,17:NaN:Inf,18:NaN:Inf,19:NaN:Inf>
                  mov o1.xyz, r1.xyzx  // SkinnedVS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                  mov o2.xyz, r2.xyzx  // SkinnedVS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                  mov o4.xy, r6.xyxx  // SkinnedVS<14:NaN:Inf,15:NaN:Inf>
                  ret 
                
                #line 137
                endif 
                ret 
                // Approximately 108 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct Light
                //   {
                //       
                //       struct Material
                //       {
                //           
                //           float4 ambient;            // Offset:    0
                //           float4 diffuse;            // Offset:   16
                //           float4 specular;           // Offset:   32
                //
                //       } mat;                         // Offset:    0
                //       float3 pos;                    // Offset:   48
                //       float range;                   // Offset:   60
                //       float3 dir;                    // Offset:   64
                //       float spot;                    // Offset:   76
                //       float3 att;                    // Offset:   80
                //       float type;                    // Offset:   92
                //       float3 intensity;              // Offset:   96
                //       float id;                      // Offset:  108
                //
                //   } gLights[10];                     // Offset:    0 Size:  1120
                //   float gNumLights;                  // Offset: 1120 Size:     4
                //   float3 gEyePosW;                   // Offset: 1124 Size:    12
                //   float gFogStart;                   // Offset: 1136 Size:     4
                //   float gFogRange;                   // Offset: 1140 Size:     4
                //   float4 gFogColor;                  // Offset: 1152 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  320
                //       float4 diffuse;                // Offset:  336
                //       float4 specular;               // Offset:  352
                //
                //   } gMaterial;                       // Offset:  320 Size:    48
                //   bool gUseTexture;                  // Offset:  368 Size:     4
                //   bool gUseNormalMap;                // Offset:  372 Size:     4 [unused]
                //   bool gUseAnimation;                // Offset:  376 Size:     4 [unused]
                //   bool gRenderingToShadowMap;        // Offset:  380 Size:     4
                //   bool gUseLighting;                 // Offset:  384 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // textureSampler                    sampler      NA          NA    0        1
                // samShadow                       sampler_c      NA          NA    1        1
                // samLinear                         sampler      NA          NA    2        1
                // gTexture                          texture  float4          2d    0        1
                // gNormalMap                        texture  float4          2d    1        1
                // gShadowMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyzw        3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                // TEXCOORD                 1   xyzw        5     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[73], dynamicIndexed
                dcl_constantbuffer cb1[25], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_sampler s2, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyzw
                dcl_output o0.xyzw
                dcl_temps 28
                
                #line 264 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[23].w
                if_nz r0.x
                  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // NormalMapPS<0: 1f,1: 1f,2: 1f,3: 1f>
                  ret 
                endif 
                
                #line 268
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov r1.xyz, r0.zxyz  // pin<9:NaN:Inf,7:NaN:Inf,8:NaN:Inf>
                mov r2.xyz, -v1.xyzx
                add r2.xyz, r2.xyzx, cb0[70].yzwy
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r1.w, r0.w
                mul r2.xyz, r1.wwww, r2.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 275
                ine r1.w, l(0, 0, 0, 0), cb1[23].x
                if_nz r1.w
                  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                else 
                  mov r3.xyz, l(1.000000,1.000000,1.000000,0)  // texColor<0: 1f,1: 1f,2: 1f>
                  mov r3.w, l(1.000000)  // texColor<3: 1f>
                endif 
                
                #line 278
                sample_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t1.xyzw, s2
                mov r4.xyz, r4.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                nop 
                mov r4.xyz, r4.xyzx  // normalMapSample<0:Inf,1:Inf,2:Inf>
                mov r1.xyz, r1.xyzx  // unitNormalW<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                mov r5.xyz, v3.xyzx  // tangentW<0,1,2>
                
                #line 198 "LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                add r4.xyz, r4.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // normalT<0:Inf,1:Inf,2:Inf>
                
                #line 201
                mov r1.xyz, r1.xyzx  // N<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // T<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.xyz, r5.yzxy  // T<1:NaN:Inf,2:NaN:Inf,0:NaN:Inf>
                mul r7.xyz, r1.zxyz, r6.yzxy
                mul r1.xyz, r1.xyzx, r6.xyzx
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, r7.xyzx  // B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 208
                mul r5.xyz, r4.xxxx, r5.xyzx
                mul r1.xyz, r1.xyzx, r4.yyyy
                add r1.xyz, r1.xyzx, r5.xyzx
                mul r0.xyz, r0.xyzx, r4.zzzz
                add r0.xyz, r0.xyzx, r1.xyzx  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 279 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                mov r0.xyz, r0.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 283
                nop 
                mov r1.xyzw, v5.xyzw  // shadowPosH<0,1,2,3>
                
                #line 221 "LightHelper.fx"
                div r1.xyz, r1.zxyz, r1.wwww  // shadowPosH<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                
                #line 224
                mov r1.x, r1.x  // depth<0:NaN:Inf>
                
                #line 242
                add r4.xy, r1.yzyy, l(-0.000488, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t2.xxxx, s1, r1.x
                add r1.w, r1.w, l(0.000000)  // percentLit<0:[0f,1f]>
                add r4.xy, r1.yzyy, l(0.000000, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t2.xxxx, s1, r1.x
                add r1.w, r1.w, r2.w  // percentLit<0:[0f,2f]>
                add r4.xy, r1.yzyy, l(0.000488, -0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t2.xxxx, s1, r1.x
                add r1.w, r1.w, r2.w  // percentLit<0:[0f,3f]>
                add r4.xy, r1.yzyy, l(-0.000488, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t2.xxxx, s1, r1.x
                add r1.w, r1.w, r2.w  // percentLit<0:[0f,4f]>
                add r4.xy, r1.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t2.xxxx, s1, r1.x
                add r1.w, r1.w, r2.w  // percentLit<0:[0f,5f]>
                add r4.xy, r1.yzyy, l(0.000488, 0.000000, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t2.xxxx, s1, r1.x
                add r1.w, r1.w, r2.w  // percentLit<0:[0f,6f]>
                add r4.xy, r1.yzyy, l(-0.000488, 0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t2.xxxx, s1, r1.x
                add r1.w, r1.w, r2.w  // percentLit<0:[0f,7f]>
                add r4.xy, r1.yzyy, l(0.000000, 0.000488, 0.000000, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r4.xyxx, t2.xxxx, s1, r1.x
                add r1.w, r1.w, r2.w  // percentLit<0:[0f,8f]>
                add r1.yz, r1.yyzy, l(0.000000, 0.000488, 0.000488, 0.000000)
                sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r1.yzyy, t2.xxxx, s1, r1.x
                add r1.x, r1.x, r1.w  // percentLit<0:[0f,9f]>
                
                #line 245
                div r1.x, r1.x, l(9.000000)  // percentLit<0:[0f,1f]>
                mov r1.x, r1.x  // CalcShadowFactor<0:[0f,1f]>
                
                #line 283 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                mov r1.x, r1.x  // shadow<0:[0f,1f]>
                
                #line 287
                ine r1.y, l(0, 0, 0, 0), cb1[24].x
                if_nz r1.y
                  nop 
                  ftoi r1.y, cb0[70].x  // numLights<0>
                  mov r4.xyzw, cb1[22].xyzw  // material<8,9,10,11>
                  mov r5.xyz, cb1[20].xyzx  // material<0,1,2>
                  mov r6.xyz, cb1[21].xyzx  // material<4,5,6>
                  mov r7.xyz, v1.xyzx  // posW<0,1,2>
                  mov r0.xyz, r0.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.xyz, r2.xyzx  // toEyeW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.xyz, r3.xyzx  // texColor<0:Inf,1:Inf,2:Inf>
                  mov r1.x, r1.x  // shadow<0:[0f,1f]>
                
                #line 168 "LightHelper.fx"
                  mov r8.xyz, l(0,0,0,0)  // ambient<0: -0f,1: -0f,2: -0f>
                
                #line 173
                  mov r1.z, l(0)  // i<0: 0>
                  mov r9.xyz, r8.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r10.xyz, r8.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r11.xyz, r8.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.w, r1.z  // i<0>
                  loop 
                    ilt r2.w, r1.w, r1.y
                    breakc_z r2.w
                
                #line 178
                    imul null, r2.w, r1.w, l(7)
                    eq r5.w, cb0[r2.w + 5].w, l(0.000000)
                    if_nz r5.w
                      nop 
                      mov r12.xyz, r5.xyzx  // mat<0,1,2>
                      mov r13.xyz, r6.xyzx  // mat<4,5,6>
                      mov r14.xyzw, r4.xyzw  // mat<8,9,10,11>
                      mov r15.xyz, cb0[r2.w + 0].xyzx  // light<0,1,2>
                      mov r16.xyz, cb0[r2.w + 1].xyzx  // light<4,5,6>
                      mov r17.xyz, cb0[r2.w + 2].xyzx  // light<8,9,10>
                      mov r18.xyz, cb0[r2.w + 4].xyzx  // light<16,17,18>
                      mov r19.xyz, cb0[r2.w + 6].xyzx  // light<24,25,26>
                      mov r20.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r21.xyz, r2.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 43
                      mov r18.xyz, -r18.xyzx  // lightVec<0,1,2>
                
                #line 46
                      mul r12.xyz, r12.xyzx, r15.xyzx
                      mul r12.xyz, r19.xxxx, r12.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 51
                      dp3 r5.w, r18.xyzx, r20.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 55
                      lt r6.w, l(0.000000), r5.w
                      mov r15.xyz, -r18.xyzx
                      dp3 r7.w, r15.xyzx, r20.xyzx
                      add r7.w, r7.w, r7.w
                      mov r7.w, -r7.w
                      mul r18.xyz, r7.wwww, r20.xyzx
                      add r15.xyz, r15.xyzx, r18.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      dp3 r7.w, r15.xyzx, r21.xyzx
                      max r7.w, r7.w, l(0.000000)
                      log r7.w, r7.w
                      mul r7.w, r7.w, r14.w
                      exp r7.w, r7.w  // specFactor<0:NaN:Inf>
                      mul r13.xyz, r13.xyzx, r5.wwww
                      mul r13.xyz, r16.xyzx, r13.xyzx
                      mul r13.xyz, r19.yyyy, r13.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mul r14.xyz, r14.xyzx, r7.wwww
                      mul r14.xyz, r17.xyzx, r14.xyzx
                      mul r14.xyz, r19.zzzz, r14.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 55
                      movc r13.xyz, r6.wwww, r13.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      movc r14.xyz, r6.wwww, r14.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 179
                      mov r12.xyz, r12.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r13.xyz, r13.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      mov r14.xyz, r14.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    else 
                      eq r5.w, cb0[r2.w + 5].w, l(1.000000)
                      if_nz r5.w
                        nop 
                        mov r15.xyz, r5.xyzx  // mat<0,1,2>
                        mov r16.xyz, r6.xyzx  // mat<4,5,6>
                        mov r17.xyzw, r4.xyzw  // mat<8,9,10,11>
                        mov r18.xyz, cb0[r2.w + 0].xyzx  // light<0,1,2>
                        mov r19.xyz, cb0[r2.w + 1].xyzx  // light<4,5,6>
                        mov r20.xyz, cb0[r2.w + 2].xyzx  // light<8,9,10>
                        mov r21.xyz, cb0[r2.w + 3].xyzx  // light<12,13,14>
                        mov r22.xyz, cb0[r2.w + 5].xyzx  // light<20,21,22>
                        mov r5.w, cb0[r2.w + 3].w  // light<15>
                        mov r23.xyz, cb0[r2.w + 6].xyzx  // light<24,25,26>
                        mov r24.xyz, r7.xyzx  // pos<0,1,2>
                        mov r25.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        mov r26.xyz, r2.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 74
                        mov r24.xyz, -r24.xyzx
                        add r21.xyz, r21.xyzx, r24.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 77
                        dp3 r6.w, r21.xyzx, r21.xyzx
                        sqrt r24.y, r6.w  // d<0:NaN:Inf>
                
                #line 80
                        lt r5.w, r5.w, r24.y
                
                #line 84
                        if_z r5.w
                          div r21.xyz, r21.xyzx, r24.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 87
                          mul r15.xyz, r15.xyzx, r18.xyzx
                          mul r12.xyz, r23.xxxx, r15.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 92
                          dp3 r5.w, r21.xyzx, r25.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 96
                          lt r6.w, l(0.000000), r5.w
                          mov r15.xyz, -r21.xyzx
                          dp3 r7.w, r15.xyzx, r25.xyzx
                          add r7.w, r7.w, r7.w
                          mov r7.w, -r7.w
                          mul r18.xyz, r7.wwww, r25.xyzx
                          add r15.xyz, r15.xyzx, r18.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          dp3 r7.w, r15.xyzx, r26.xyzx
                          max r7.w, r7.w, l(0.000000)
                          log r7.w, r7.w
                          mul r7.w, r7.w, r17.w
                          exp r7.w, r7.w  // specFactor<0:NaN:Inf>
                          mul r15.xyz, r16.xyzx, r5.wwww
                          mul r15.xyz, r19.xyzx, r15.xyzx
                          mul r15.xyz, r23.yyyy, r15.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mul r16.xyz, r17.xyzx, r7.wwww
                          mul r16.xyz, r20.xyzx, r16.xyzx
                          mul r16.xyz, r23.zzzz, r16.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 96
                          movc r15.xyz, r6.wwww, r15.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          movc r16.xyz, r6.wwww, r16.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 106
                          mul r24.z, r24.y, r24.y
                          mov r24.x, l(1.000000)
                          dp3 r5.w, r22.xyzx, r24.xyzx
                          div r5.w, l(1.000000), r5.w  // att<0:NaN:Inf>
                          mul r13.xyz, r5.wwww, r15.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mul r14.xyz, r5.wwww, r16.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 84
                        else 
                          mov r12.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                          mov r13.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                          mov r14.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                        endif 
                
                #line 181
                        mov r12.xyz, r12.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        mov r13.xyz, r13.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        mov r14.xyz, r14.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                      else 
                        eq r5.w, cb0[r2.w + 5].w, l(2.000000)
                        if_nz r5.w
                          nop 
                          mov r15.xyz, r5.xyzx  // mat<0,1,2>
                          mov r16.xyz, r6.xyzx  // mat<4,5,6>
                          mov r17.xyzw, r4.xyzw  // mat<8,9,10,11>
                          mov r18.xyz, cb0[r2.w + 0].xyzx  // light<0,1,2>
                          mov r19.xyz, cb0[r2.w + 1].xyzx  // light<4,5,6>
                          mov r20.xyz, cb0[r2.w + 2].xyzx  // light<8,9,10>
                          mov r21.xyz, cb0[r2.w + 3].xyzx  // light<12,13,14>
                          mov r22.xyz, cb0[r2.w + 4].xyzx  // light<16,17,18>
                          mov r23.xyz, cb0[r2.w + 5].xyzx  // light<20,21,22>
                          mov r5.w, cb0[r2.w + 3].w  // light<15>
                          mov r6.w, cb0[r2.w + 4].w  // light<19>
                          mov r24.xyz, cb0[r2.w + 6].xyzx  // light<24,25,26>
                          mov r25.xyz, r7.xyzx  // pos<0,1,2>
                          mov r26.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mov r27.xyz, r2.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 121
                          mov r25.xyz, -r25.xyzx
                          add r21.xyz, r21.xyzx, r25.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 124
                          dp3 r2.w, r21.xyzx, r21.xyzx
                          sqrt r25.y, r2.w  // d<0:NaN:Inf>
                
                #line 127
                          lt r2.w, r5.w, r25.y
                
                #line 131
                          if_z r2.w
                            div r21.xyz, r21.xyzx, r25.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 134
                            mul r15.xyz, r15.xyzx, r18.xyzx
                            mul r15.xyz, r24.xxxx, r15.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 139
                            dp3 r2.w, r21.xyzx, r26.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 143
                            lt r5.w, l(0.000000), r2.w
                            mov r18.xyz, -r21.xyzx
                            dp3 r7.w, r18.xyzx, r26.xyzx
                            add r7.w, r7.w, r7.w
                            mov r7.w, -r7.w
                            mul r21.xyz, r7.wwww, r26.xyzx
                            add r21.xyz, r18.xyzx, r21.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            dp3 r7.w, r21.xyzx, r27.xyzx
                            max r7.w, r7.w, l(0.000000)
                            log r7.w, r7.w
                            mul r7.w, r7.w, r17.w
                            exp r7.w, r7.w  // specFactor<0:NaN:Inf>
                            mul r16.xyz, r16.xyzx, r2.wwww
                            mul r16.xyz, r19.xyzx, r16.xyzx
                            mul r16.xyz, r24.yyyy, r16.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            mul r17.xyz, r17.xyzx, r7.wwww
                            mul r17.xyz, r20.xyzx, r17.xyzx
                            mul r17.xyz, r24.zzzz, r17.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 143
                            movc r16.xyz, r5.wwww, r16.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            movc r17.xyz, r5.wwww, r17.xyzx, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 153
                            dp3 r2.w, r18.xyzx, r22.xyzx
                            max r2.w, r2.w, l(0.000000)
                            log r2.w, r2.w
                            mul r2.w, r2.w, r6.w
                            exp r2.w, r2.w  // spot<0:NaN:Inf>
                
                #line 156
                            mul r25.z, r25.y, r25.y
                            mov r25.x, l(1.000000)
                            dp3 r5.w, r23.xyzx, r25.xyzx
                            div r5.w, r2.w, r5.w  // att<0:NaN:Inf>
                            mul r12.xyz, r2.wwww, r15.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            mul r13.xyz, r5.wwww, r16.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                            mul r14.xyz, r5.wwww, r17.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                          else 
                            mov r12.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                            mov r13.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                            mov r14.xyz, l(0,0,0,0)  // spec<0: 0f,1: 0f,2: 0f>
                          endif 
                
                #line 183
                          mov r12.xyz, r12.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mov r13.xyz, r13.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                          mov r14.xyz, r14.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                        endif 
                      endif 
                    endif 
                
                #line 185
                    add r9.xyz, r9.xyzx, r12.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r12.xyz, r1.xxxx, r13.xyzx
                    add r10.xyz, r10.xyzx, r12.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mul r12.xyz, r1.xxxx, r14.xyzx
                    add r11.xyz, r11.xyzx, r12.xyzx  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 173
                    iadd r1.w, r1.w, l(1)  // i<0>
                  endloop 
                
                #line 190
                  add r0.xyz, r9.xyzx, r10.xyzx
                  mul r0.xyz, r0.xyzx, r3.xyzx
                  add r0.xyz, r11.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 288 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                  mov r0.xyz, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                else 
                
                #line 290
                  add r1.xyz, cb1[20].xyzx, cb1[21].xyzx
                  mul r1.xyz, r1.xyzx, r3.xyzx
                  add r0.xyz, r1.xyzx, cb1[22].xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 287
                endif 
                
                #line 293
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                mov r1.x, -cb0[71].x
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[71].y
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 297
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[72].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 300
                mul r0.w, r3.w, cb1[21].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // NormalMapPS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // NormalMapPS<3:NaN:Inf>
                ret 
                // Approximately 308 instruction slots used
                            
            };
        }

    }

    technique11 ShadowMapTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   float4x4 gShadowTransform;         // Offset:  256 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:  320
                //       float4 diffuse;                // Offset:  336
                //       float4 specular;               // Offset:  352
                //
                //   } gMaterial;                       // Offset:  320 Size:    48 [unused]
                //   bool gUseTexture;                  // Offset:  368 Size:     4 [unused]
                //   bool gUseNormalMap;                // Offset:  372 Size:     4 [unused]
                //   bool gUseAnimation;                // Offset:  376 Size:     4
                //   bool gRenderingToShadowMap;        // Offset:  380 Size:     4 [unused]
                //   bool gUseLighting;                 // Offset:  384 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbSkinned
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbSkinned                         cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float       
                // TEXCOORD                 0   xy          2     NONE  float       
                // TANGENT                  0   xyzw        3     NONE  float       
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[24], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 4
                dcl_indexableTemp x0[4], 4
                
                #line 199 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Basic.fx"
                ine r0.x, l(0, 0, 0, 0), cb0[23].z
                if_nz r0.x
                
                #line 203
                  mov x0[0].x, v4.x  // weights<0>
                  mov x0[1].x, v4.y  // weights<1>
                  mov x0[2].x, v4.z  // weights<2>
                  mov r0.x, -v4.x
                  add r0.x, r0.x, l(1.000000)
                  mov r0.y, -v4.y
                  add r0.x, r0.y, r0.x
                  mov r0.y, -v4.z
                  add r0.x, r0.y, r0.x
                  mov x0[3].x, r0.x  // weights<3>
                
                #line 209
                  mov r0.xyz, l(0,0,0,0)  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.x, l(0)  // i<0>
                  loop 
                    ilt r1.y, r1.x, l(4)
                    breakc_z r1.y
                    mov r1.y, r1.x
                    mov r1.z, x0[r1.y + 0].x  // weights<0:Inf>
                    and r2.xyzw, v5.xyzw, icb[r1.y + 0].xyzw
                    or r1.yw, r2.yyyw, r2.xxxz
                    or r1.y, r1.w, r1.y
                    imul null, r1.y, r1.y, l(4)
                    mov r2.xyz, v0.xyzx
                    mov r2.w, l(1.000000)
                    dp4 r3.x, r2.xyzw, cb1[r1.y + 0].xyzw
                    dp4 r3.y, r2.xyzw, cb1[r1.y + 1].xyzw
                    dp4 r3.z, r2.xyzw, cb1[r1.y + 2].xyzw
                    mul r1.yzw, r1.zzzz, r3.xxyz
                    add r0.xyz, r0.xyzx, r1.yzwy  // posL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    iadd r1.x, r1.x, l(1)  // i<0>
                  endloop 
                
                #line 213
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                  dp4 r1.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                  dp4 r1.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                  dp4 r1.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 199
                else 
                
                #line 216
                  mov r0.xyz, v0.xyzx
                  mov r0.w, l(1.000000)
                  dp4 r1.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                  dp4 r1.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                  dp4 r1.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                  dp4 r1.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 199
                endif 
                
                #line 218
                mov o0.xyzw, r1.xyzw  // ShadowVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 47 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = NULL;
        }

    }

}

