//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerFrame
{
    Light   gLights[10];                // Offset:    0, size: 1120
    float   gNumLights;                 // Offset: 1120, size:    4
    float3  gEyePosW;                   // Offset: 1124, size:   12
    float   gFogStart;                  // Offset: 1136, size:    4
    float   gFogRange;                  // Offset: 1140, size:    4
    float4  gFogColor;                  // Offset: 1152, size:   16
}

cbuffer cbPerObject
{
    float4x4 gViewProj;                 // Offset:    0, size:   64
    Material gMaterial;                 // Offset:   64, size:   48
    bool    gUseTexture;                // Offset:  112, size:    4
}

cbuffer cbFixed
{
    float2  gTexC[4] = { 0, 1, 0, 0, 1, 1, 1, 0 };// Offset:    0, size:   56
}

//
// 5 local object(s)
//
Texture2D gTexture;
SamplerState samplerState
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState NoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 BillboardTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SIZE                     0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SIZE                     0   xy          1     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                
                #line 93 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Billboard.fx"
                mov r0.xyz, v0.xyzx  // vout<0,1,2>
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov o0.xyz, r0.xyzx  // VS<0,1,2>
                mov o1.xy, r1.xyxx  // VS<3,4>
                ret 
                // Approximately 5 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct Light
                //   {
                //       
                //       struct Material
                //       {
                //           
                //           float4 ambient;            // Offset:    0
                //           float4 diffuse;            // Offset:   16
                //           float4 specular;           // Offset:   32
                //
                //       } mat;                         // Offset:    0
                //       float3 pos;                    // Offset:   48
                //       float range;                   // Offset:   60
                //       float3 dir;                    // Offset:   64
                //       float spot;                    // Offset:   76
                //       float3 att;                    // Offset:   80
                //       float type;                    // Offset:   92
                //       float3 intensity;              // Offset:   96
                //       float id;                      // Offset:  108
                //
                //   } gLights[10];                     // Offset:    0 Size:  1120 [unused]
                //   float gNumLights;                  // Offset: 1120 Size:     4 [unused]
                //   float3 gEyePosW;                   // Offset: 1124 Size:    12
                //   float gFogStart;                   // Offset: 1136 Size:     4 [unused]
                //   float gFogRange;                   // Offset: 1140 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset: 1152 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:   64
                //       float4 diffuse;                // Offset:   80
                //       float4 specular;               // Offset:   96
                //
                //   } gMaterial;                       // Offset:   64 Size:    48 [unused]
                //   bool gUseTexture;                  // Offset:  112 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float2 gTexC[4];                   // Offset:    0 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                // cbFixed                           cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SIZE                     0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // m0:SV_POSITION           0   xyzw        0      POS  float   xyzw
                // m0:POSITION              0   xyz         1     NONE  float   xyz 
                // m0:NORMAL                0   xyz         2     NONE  float   xyz 
                // m0:TEXCOORD              0   xy          3     NONE  float   xy  
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[71], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[4], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_temps 7
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_maxout 4
                
                #line 106 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Billboard.fx"
                mov r0.xy, -v[0][0].xzxx
                add r0.xz, r0.xxyx, cb0[70].yywy  // look<0:Inf,2:Inf>
                mov r0.y, l(0)  // look<1: 0f>
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // look<0:NaN:Inf,1: 0f,2:NaN:Inf>
                mul r1.xyz, r0.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
                mul r2.xyz, r0.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
                mov r2.xyz, -r2.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // right<0:NaN:Inf,1: 0f,2:NaN:Inf>
                
                #line 112
                mul r0.w, l(0.500000), v[0][1].x  // halfWidth<0:[-1.70141e+038f,1.70141e+038f]>
                mul r1.w, l(0.500000), v[0][1].y  // halfHeight<0:[-1.70141e+038f,1.70141e+038f]>
                
                #line 116
                mul r1.xyz, r1.xyzx, r0.wwww
                add r2.xyz, r1.xyzx, v[0][0].xyzx
                mul r3.xyz, r1.wwww, l(0.000000, 1.000000, 0.000000, 0.000000)
                mov r4.xyz, -r3.xyzx
                add r5.xyz, r2.xyzx, r4.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mov r1.xyz, -r1.xyzx
                add r1.xyz, r1.xyzx, v[0][0].xyzx
                add r4.xyz, r4.xyzx, r1.xyzx
                add r1.xyz, r3.xyzx, r1.xyzx
                
                #line 126
                mov r5.w, l(1.000000)
                dp4 r3.x, r5.xyzw, cb1[0].xyzw  // gout<0:NaN:Inf>
                dp4 r3.y, r5.xyzw, cb1[1].xyzw  // gout<1:NaN:Inf>
                dp4 r3.z, r5.xyzw, cb1[2].xyzw  // gout<2:NaN:Inf>
                dp4 r3.w, r5.xyzw, cb1[3].xyzw  // gout<3:NaN:Inf>
                mov r5.xyz, r5.xyzx  // gout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov r0.xyz, r0.xyzx  // gout<7:NaN:Inf,8: -0f,9:NaN:Inf>
                mov r6.xy, cb2[0].xyxx  // gout<10,11>
                mov o0.xyzw, r3.xyzw  // triStream<0,0,0,0>
                mov o1.xyz, r5.xyzx  // triStream<0,0,0>
                mov o2.xyz, r0.xyzx  // triStream<0,0,0>
                mov o3.xy, r6.xyxx  // triStream<0,0>
                emit_stream m0
                
                #line 126
                mov r2.w, l(1.000000)
                dp4 r3.x, r2.xyzw, cb1[0].xyzw  // gout<0:NaN:Inf>
                dp4 r3.y, r2.xyzw, cb1[1].xyzw  // gout<1:NaN:Inf>
                dp4 r3.z, r2.xyzw, cb1[2].xyzw  // gout<2:NaN:Inf>
                dp4 r3.w, r2.xyzw, cb1[3].xyzw  // gout<3:NaN:Inf>
                mov r2.xyz, r2.xyzx  // gout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov r5.xy, cb2[1].xyxx  // gout<10,11>
                mov o0.xyzw, r3.xyzw  // triStream<0,0,0,0>
                mov o1.xyz, r2.xyzx  // triStream<0,0,0>
                mov o2.xyz, r0.xyzx  // triStream<0,0,0>
                mov o3.xy, r5.xyxx  // triStream<0,0>
                emit_stream m0
                
                #line 126
                mov r4.w, l(1.000000)
                dp4 r2.x, r4.xyzw, cb1[0].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r4.xyzw, cb1[1].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r4.xyzw, cb1[2].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r4.xyzw, cb1[3].xyzw  // gout<3:NaN:Inf>
                mov r4.xyz, r4.xyzx  // gout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov r3.xy, cb2[2].xyxx  // gout<10,11>
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.xyz, r4.xyzx  // triStream<0,0,0>
                mov o2.xyz, r0.xyzx  // triStream<0,0,0>
                mov o3.xy, r3.xyxx  // triStream<0,0>
                emit_stream m0
                
                #line 126
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[0].xyzw  // gout<0:NaN:Inf>
                dp4 r2.y, r1.xyzw, cb1[1].xyzw  // gout<1:NaN:Inf>
                dp4 r2.z, r1.xyzw, cb1[2].xyzw  // gout<2:NaN:Inf>
                dp4 r2.w, r1.xyzw, cb1[3].xyzw  // gout<3:NaN:Inf>
                mov r1.xyz, r1.xyzx  // gout<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov r3.xy, cb2[3].xyxx  // gout<10,11>
                mov o0.xyzw, r2.xyzw  // triStream<0,0,0,0>
                mov o1.xyz, r1.xyzx  // triStream<0,0,0>
                mov o2.xyz, r0.xyzx  // triStream<0,0,0>
                mov o3.xy, r3.xyxx  // triStream<0,0>
                emit_stream m0
                
                #line 101
                ret 
                // Approximately 72 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct Light
                //   {
                //       
                //       struct Material
                //       {
                //           
                //           float4 ambient;            // Offset:    0
                //           float4 diffuse;            // Offset:   16
                //           float4 specular;           // Offset:   32
                //
                //       } mat;                         // Offset:    0
                //       float3 pos;                    // Offset:   48
                //       float range;                   // Offset:   60
                //       float3 dir;                    // Offset:   64
                //       float spot;                    // Offset:   76
                //       float3 att;                    // Offset:   80
                //       float type;                    // Offset:   92
                //       float3 intensity;              // Offset:   96
                //       float id;                      // Offset:  108
                //
                //   } gLights[10];                     // Offset:    0 Size:  1120
                //   float gNumLights;                  // Offset: 1120 Size:     4
                //   float3 gEyePosW;                   // Offset: 1124 Size:    12
                //   float gFogStart;                   // Offset: 1136 Size:     4
                //   float gFogRange;                   // Offset: 1140 Size:     4
                //   float4 gFogColor;                  // Offset: 1152 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 ambient;                // Offset:   64
                //       float4 diffuse;                // Offset:   80
                //       float4 specular;               // Offset:   96
                //
                //   } gMaterial;                       // Offset:   64 Size:    48
                //   bool gUseTexture;                  // Offset:  112 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samplerState                      sampler      NA          NA    0        1
                // gTexture                          texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[73], dynamicIndexed
                dcl_constantbuffer cb1[8], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 145 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Billboard.fx"
                ine r0.x, l(0, 0, 0, 0), cb1[7].x
                if_nz r0.x
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                else 
                  mov r0.xyz, l(1.000000,1.000000,1.000000,0)  // texColor<0: 1f,1: 1f,2: 1f>
                  mov r0.w, l(1.000000)  // texColor<3: 1f>
                endif 
                
                #line 150
                nop 
                ftoi r1.x, cb0[70].x  // numLights<0>
                
                #line 173 "LightHelper.fx"
                mov r1.y, l(0)  // i<0: 0>
                mov r1.z, r1.y  // i<0>
                loop 
                  ilt r1.w, r1.z, r1.x
                  breakc_z r1.w
                
                #line 178
                  imul null, r1.w, r1.z, l(7)
                  eq r2.x, cb0[r1.w + 5].w, l(0.000000)
                  if_nz r2.x
                    nop 
                  else 
                    eq r2.x, cb0[r1.w + 5].w, l(1.000000)
                    if_nz r2.x
                      nop 
                    else 
                      eq r1.w, cb0[r1.w + 5].w, l(2.000000)
                      if_nz r1.w
                        nop 
                      endif 
                    endif 
                  endif 
                
                #line 173
                  iadd r1.z, r1.z, l(1)  // i<0>
                endloop 
                
                #line 151 "F:\Users\Axel\Documents\Projects\Devbox\Rendering\src\fx\Billboard.fx"
                mov r0.xyz, r0.xyzx  // litColor<0:Inf,1:Inf,2:Inf>
                
                #line 154
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[70].yzwy
                dp3 r1.x, r1.xyzx, r1.xyzx
                sqrt r1.x, r1.x  // distToEye<0:NaN:Inf>
                mov r1.y, -cb0[71].x
                add r1.x, r1.y, r1.x
                div r1.x, r1.x, cb0[71].y
                max r1.x, r1.x, l(0.000000)
                min r1.x, r1.x, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 158
                mov r1.yzw, -r0.xxyz
                add r1.yzw, r1.yyzw, cb0[72].xxyz
                mul r1.xyz, r1.yzwy, r1.xxxx
                add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 161
                mul r0.w, r0.w, cb1[5].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 49 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = AdditiveBlending;
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthWrites;
        }

    }

}

